# 第二次C++作业
## 9.11
```C++
/*Copyright-jch-Copydate[2019/10/30]
*/
#include<iostream>
#include<vector>
int main() {
    std::vector<int> ivec;  // 默认构造函数
    std::vector<int> ivec1{1, 2, 3};  // 拷贝列表元素
    std::vector<int> ivec2(ivec1);  // 拷贝构造
    std::vector<int> ivec3 = ivec1;  // 拷贝构造
    std::vector<int> ivec4(ivec1.begin(), ivec1.end());  // 指定范围元素的拷贝
    std::vector<int> ivec5(10, 1);  // 顺序容器相关的构造函数
    return 0;
}
```
## 9.22
    下面的程序的意思应该是容器中的值和某个值匹配，如果相等的话就在当前位置之前插入一个2倍的值,应该在if之后加一个else { iter++ }
## 9.25
    如果elem1和elem2相等，将不删除任何元素；
    如果elem2是尾后迭代器，将删除从elem1之后所有元素；
    如果两者皆为尾后迭代器，将不删除任何元素；
## 9.29
    vec.resize(100)会在容器末尾增加75个新的初始化元素，和容器类型有关；
    vec.resize(10)会丢弃多出的容器后部的15个元素；
## 9.43
```C++
/*Copyright-jch-Copydate[2019/10/30]
*/
#include<iostream>
#include<string>
void function (std::string &s, std::string &oldval, std::string &newval) {
    int size = oldval.size();
    for (auto beg = s.begin(); beg <= (s.end() - size); beg ++) {
        if (s.substr(beg - s.begin(), size) == oldval) {
            beg = s.erase(beg, beg + size);
            beg = s.insert(beg, newval.begin(), newval.end());
            beg += (newval.size() - 1);
        }
    }
}
int main() {
    std::string s, oldVal, newVal;
    std::cin >> s;
    std::cin >> oldVal;
    std::cin >> newVal;
    function(s, oldVal, newVal);
    std::cout << s << std::endl;
    return 0;
}
```
## 9.52
```C++
/*Copyright-jch-Copydate[2019/10/30]
 */
#include<iostream>
#include<stack>
#include<string>
#include<typeinfo>
int main() {
    std::stack<char> instack;
    std::string s;
    std::cin >> s;
    for (auto s1: s) {
        instack.push(s1);
	if (instack.top() == ')') {
	    std::string s2;
	    while(!instack.empty()) {

	        if (instack.top() != '(' && instack.top() != ')') {
		    s2.insert(s2.begin(), instack.top());
		}
		if (instack.top() == '(') {
		    instack.pop();
		    break;
		}
		instack.pop();

	    }

	    auto d = s2.find_first_of("+-*/");
	    std::string s3 = s2.substr(0, d);
	    std::string s4 = s2.substr(d + 1, s2.size() - d);
	    int d1 = stoi(s3);
	    int d2 = stoi(s4);
	    int result = 0;
	    if (s2[d] == '+') {
	        result = d1 + d2;
	    }
	    if (s2[d] == '-') {
		result = d1 - d2;
	    }
	    if (s2[d] == '*') {
	        result = d1 * d2;
	    }
	    if (s2[d] == '/') {
		result = d1 / d2;
	    }

	    auto result1 = result + '0';
	    instack.push(result1);
	    s2.clear();
        }

    }
    while (!instack.empty()) {
        std::cout << instack.top() << std::endl;
        instack.pop();

    }

    return 0;
}
```
## 10.3
```C++
/*Copyright-jch-Copydate[2019/10/31]
*/
#include<iostream>
#include<vector>
#include<numeric>
int main() {
    std::vector<int> ivec{1, 2, 3, 4, 5};
    int sum = accumulate(ivec.begin(), ivec.end(), 0);
    std::cout << sum << std::endl;
    return 0;
}
```
## 10.15
```C++
[sz](int &a) {return (a + sz);}
```
## 10.34
/*Copyright-jch Copydate-[2019/11/6]
*/
#include<iostream>
#include<vector>
#include<string>
int main() {
    std::vector<std::string> words{"learn", "C++", "every", "day"};
    for (auto it = words.crbegin(); it != words.crend(); it++) {
        std::cout << *it << " ";
    }
    return 0;
}
```
